#!/usr/bin/env python3
import requests, time, uuid; base_url="https://chroma-load-balancer.onrender.com"; test_id=f"failover_{int(time.time())}_{uuid.uuid4().hex[:8]}"; print(f"🔄 Write Failover Test - Session: {test_id}"); print("=" * 50); r = requests.get(f"{base_url}/status", timeout=30); instances = r.json().get("instances", []); primary_healthy = any(i.get("name")=="primary" and i.get("healthy") for i in instances); replica_healthy = any(i.get("name")=="replica" and i.get("healthy") for i in instances); failover_scenario = not primary_healthy and replica_healthy; print(f"Instance Status: Primary {"✅" if primary_healthy else "❌"}, Replica {"✅" if replica_healthy else "❌"}"); print(f"Failover scenario: {failover_scenario}"); collection_name = f"AUTOTEST_failover_{test_id}"; payload = {"name": collection_name, "metadata": {"test": "write_failover", "session": test_id}}; print(f"Testing collection creation: {collection_name}"); r = requests.post(f"{base_url}/api/v2/tenants/default_tenant/databases/default_database/collections", json=payload, timeout=30); print(f"Collection creation: {"✅ SUCCESS" if r.status_code in [200, 201] else "❌ FAILED"} ({r.status_code})"); print("🎉 WRITE FAILOVER WORKING!" if not primary_healthy and r.status_code in [200, 201] else ""); r = requests.delete(f"{base_url}/api/v2/tenants/default_tenant/databases/default_database/collections/{collection_name}", timeout=30); print(f"Collection deletion: {"✅ SUCCESS" if r.status_code in [200, 404] else "❌ FAILED"} ({r.status_code})"); print("🎉 DELETE FAILOVER WORKING!" if not primary_healthy and r.status_code in [200, 404] else ""); print("\n🏁 Write Failover Test Complete! ✅ Test data cleaned up")
